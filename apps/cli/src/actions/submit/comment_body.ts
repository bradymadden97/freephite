import { TBranchPRInfo } from '../../lib/engine/metadata_ref';

export interface PR extends Required<Pick<TBranchPRInfo, 'number' | 'base'>> {
  ref: string;
}
type Tree = Record<PR['ref'] | 'main', Array<PR>>;

abstract class StackCommentBodyBase {
  protected tree: Tree;
  protected comment: string;

  protected constructor(protected trunk: string, prs: Array<PR>) {
    this.tree = { [trunk]: [] };

    for (const pr of prs) {
      const deps = this.tree[pr.base];
      this.tree[pr.base] = deps ? [...deps, pr] : [pr];
      this.tree[pr.ref] = [];
    }

    this.comment = 'Current dependencies on/for this PR:\n\n';
    this.comment += this.buildTreeComment(undefined);
    this.comment += '\nThis comment was autogenerated by Freephite.';
  }

  protected buildPRString(pr: PR): string {
    return `**PR #${pr.number}**`;
  }

  private buildTreeComment(pr: PR | undefined, level = 0): string {
    let line = ' '.repeat(level * 2) + '* ';
    if (pr === undefined) {
      line += `${this.trunk}:\n`;
    } else {
      line += this.buildPRString(pr) + '\n';
    }

    const children =
      pr === undefined ? this.tree[this.trunk] : this.tree[pr.ref];

    return line.concat(
      children.map((c) => this.buildTreeComment(c, level + 1)).join('')
    );
  }
}

/**
 * External API for generating a comment from a PR stack
 *
 * const body = StackCommentBody.generate(prs: Array<PR>)
 * const withPointer = body.forPR(pr: PR);
 *
 */
export class StackCommentBody extends StackCommentBodyBase {
  public static generate(trunk: string, prs: Array<PR>): StackCommentBody {
    return new this(trunk, prs);
  }

  public forPR(pr: PR): string {
    const line = this.buildPRString(pr);
    const index = this.comment.indexOf(line);

    return (
      this.comment.slice(0, index + line.length) +
      ' ðŸ‘ˆ' +
      this.comment.slice(index + line.length)
    );
  }

  public toString(): string {
    return this.comment;
  }
}
